version: '3'

dotenv: ['.taskenv', '.secret/.env', '{{.HOME}}/.env' ]
vars:
  LOCAL_BIN: bin
  ENVTEST_K8S_VERSION: "1.30.0" # to get latest version run $(pwd)/bin/setup-envtest list
  ENVTEST_VERSION: "release-0.20" # https://github.com/kubernetes-sigs/controller-runtime/releases
  MOCKERY_VERSION: v2.52.3 # https://github.com/vektra/mockery/releases
  CONTROLLER_GEN_VERSION: v0.18.0 # https://github.com/kubernetes-sigs/controller-tools/releases
tasks:
  ## Setup
  setup:mockery:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/mockery || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/vektra/mockery/v2@{{.MOCKERY_VERSION}}
  setup:envtest:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/setup-envtest || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-runtime/tools/setup-envtest@{{.ENVTEST_VERSION}}
  setup:controller-gen:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/controller-gen || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{.CONTROLLER_GEN_VERSION}}
  update:crd:
    desc: "Download the latest CRDs"
    cmds:
      - mkdir -p tests/gateway_test/testdata/crd
      - curl -sSLo tests/gateway_test/testdata/crd/core.platform-mesh.io_accounts.yaml https://raw.githubusercontent.com/platform-mesh/account-operator/main/config/crd/core.platform-mesh.io_accounts.yaml
      - echo "CRD updated successfully."
  setup:golangci-lint:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/golangci-lint || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  setup:go-test-coverage:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/go-test-coverage || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/vladopajic/go-test-coverage/v2@latest

  ## Code Generation
  generate:crd:
    desc: "Generate CRD manifests from Go types"
    deps: [setup:controller-gen]
    cmds:
      - "{{.LOCAL_BIN}}/controller-gen crd:crdVersions=v1 paths=./common/apis/v1alpha1 output:crd:artifacts:config=config/crd"
      - echo "CRD manifests generated successfully in config/crd/"
  generate:deepcopy:
    desc: "Generate deepcopy methods for API types"
    deps: [setup:controller-gen]
    cmds:
      - "{{.LOCAL_BIN}}/controller-gen object paths=./common/apis/v1alpha1"
      - echo "Deepcopy methods generated successfully"
  generate:
    desc: "Generate all CRD-related files (manifests + deepcopy methods)"
    deps: [generate:crd, generate:deepcopy]
    cmds:
      - echo "All CRD generation completed successfully!"

  ## Development
  mockery:
    deps: [ setup:mockery ]
    cmds:
      - "{{.LOCAL_BIN}}/mockery"
  docker:
    cmds:
      - docker build -t ghcr.io/platform-mesh/kubernetes-graphql-gateway .
  ## Testing
  fmt:
    cmds:
      - go fmt ./...
  lint:
    deps: [setup:golangci-lint]
    cmds:
      - task: fmt
      - "{{.LOCAL_BIN}}/golangci-lint run --timeout 10m ./..."
  envtest:
    deps: [mockery]
    env:
      KUBEBUILDER_ASSETS:
        sh: $(pwd)/{{.LOCAL_BIN}}/setup-envtest use {{.ENVTEST_K8S_VERSION}} --bin-dir $(pwd)/{{.LOCAL_BIN}} -p path
    cmds:
      - go test ./... {{.ADDITIONAL_COMMAND_ARGS}}
  test:
    deps: [setup:envtest, update:crd]
    cmds:
      - task: envtest
        vars:
          ADDITIONAL_COMMAND_ARGS: -coverprofile=./cover.out -covermode=atomic -coverpkg=./...
  cover:
    deps: [ setup:envtest, update:crd, setup:go-test-coverage ]
    cmds:
      - task: envtest
        vars:
          ADDITIONAL_COMMAND_ARGS: -coverprofile=./cover.out -covermode=atomic -coverpkg=./...
      - "{{.LOCAL_BIN}}/go-test-coverage --profile cover.out --config ./.testcoverage.yml"
  cover-html:
    desc: "Generate and open HTML coverage report"
    deps: [cover]
    cmds:
      - go tool cover -html=cover.out -o coverage.html
      - open coverage.html || xdg-open coverage.html || start coverage.html
  validate:
    desc: "Run all validation checks including code generation, linting, and testing"
    cmds:
      - task: generate
      - task: mockery
      - task: lint
      - task: test


  gateway:
    desc: "Start the GraphQL gateway server (kills existing process on port 8080 if needed)"
    cmds:
      - |
        # Check if port 8080 is in use and kill the process if found
        PID=$(lsof -ti:8080 2>/dev/null || echo "")
        if [ ! -z "$PID" ]; then
          echo "Found existing process $PID on port 8080, killing it..."
          kill $PID 2>/dev/null || true
          sleep 2
        fi
      - go run main.go gateway

  listener:
    desc: "Start the listener server (kills existing process on port 8090 if needed)"
    cmds:
      - |
        # Check if port 8090 is in use and kill the process if found
        PID=$(lsof -ti:8090 2>/dev/null || echo "")
        if [ ! -z "$PID" ]; then
          echo "Found existing process $PID on port 8090, killing it..."
          kill $PID 2>/dev/null || true
          sleep 2
        fi
      - go run main.go listener
