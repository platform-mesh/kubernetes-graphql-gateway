// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	targetcluster "github.com/platform-mesh/kubernetes-graphql-gateway/gateway/manager/targetcluster"
)

// MockClusterManager is an autogenerated mock type for the ClusterManager type
type MockClusterManager struct {
	mock.Mock
}

type MockClusterManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterManager) EXPECT() *MockClusterManager_Expecter {
	return &MockClusterManager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockClusterManager) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClusterManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClusterManager_Expecter) Close() *MockClusterManager_Close_Call {
	return &MockClusterManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClusterManager_Close_Call) Run(run func()) *MockClusterManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClusterManager_Close_Call) Return(_a0 error) *MockClusterManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_Close_Call) RunAndReturn(run func() error) *MockClusterManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with given fields: name
func (_m *MockClusterManager) GetCluster(name string) (*targetcluster.TargetCluster, bool) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *targetcluster.TargetCluster
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*targetcluster.TargetCluster, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *targetcluster.TargetCluster); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*targetcluster.TargetCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockClusterManager_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type MockClusterManager_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - name string
func (_e *MockClusterManager_Expecter) GetCluster(name interface{}) *MockClusterManager_GetCluster_Call {
	return &MockClusterManager_GetCluster_Call{Call: _e.mock.On("GetCluster", name)}
}

func (_c *MockClusterManager_GetCluster_Call) Run(run func(name string)) *MockClusterManager_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClusterManager_GetCluster_Call) Return(_a0 *targetcluster.TargetCluster, _a1 bool) *MockClusterManager_GetCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterManager_GetCluster_Call) RunAndReturn(run func(string) (*targetcluster.TargetCluster, bool)) *MockClusterManager_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// LoadCluster provides a mock function with given fields: schemaFilePath
func (_m *MockClusterManager) LoadCluster(schemaFilePath string) error {
	ret := _m.Called(schemaFilePath)

	if len(ret) == 0 {
		panic("no return value specified for LoadCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(schemaFilePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_LoadCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadCluster'
type MockClusterManager_LoadCluster_Call struct {
	*mock.Call
}

// LoadCluster is a helper method to define mock.On call
//   - schemaFilePath string
func (_e *MockClusterManager_Expecter) LoadCluster(schemaFilePath interface{}) *MockClusterManager_LoadCluster_Call {
	return &MockClusterManager_LoadCluster_Call{Call: _e.mock.On("LoadCluster", schemaFilePath)}
}

func (_c *MockClusterManager_LoadCluster_Call) Run(run func(schemaFilePath string)) *MockClusterManager_LoadCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClusterManager_LoadCluster_Call) Return(_a0 error) *MockClusterManager_LoadCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_LoadCluster_Call) RunAndReturn(run func(string) error) *MockClusterManager_LoadCluster_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveCluster provides a mock function with given fields: schemaFilePath
func (_m *MockClusterManager) RemoveCluster(schemaFilePath string) error {
	ret := _m.Called(schemaFilePath)

	if len(ret) == 0 {
		panic("no return value specified for RemoveCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(schemaFilePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_RemoveCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveCluster'
type MockClusterManager_RemoveCluster_Call struct {
	*mock.Call
}

// RemoveCluster is a helper method to define mock.On call
//   - schemaFilePath string
func (_e *MockClusterManager_Expecter) RemoveCluster(schemaFilePath interface{}) *MockClusterManager_RemoveCluster_Call {
	return &MockClusterManager_RemoveCluster_Call{Call: _e.mock.On("RemoveCluster", schemaFilePath)}
}

func (_c *MockClusterManager_RemoveCluster_Call) Run(run func(schemaFilePath string)) *MockClusterManager_RemoveCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClusterManager_RemoveCluster_Call) Return(_a0 error) *MockClusterManager_RemoveCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_RemoveCluster_Call) RunAndReturn(run func(string) error) *MockClusterManager_RemoveCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ServeHTTP provides a mock function with given fields: w, r
func (_m *MockClusterManager) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// MockClusterManager_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type MockClusterManager_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockClusterManager_Expecter) ServeHTTP(w interface{}, r interface{}) *MockClusterManager_ServeHTTP_Call {
	return &MockClusterManager_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", w, r)}
}

func (_c *MockClusterManager_ServeHTTP_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockClusterManager_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockClusterManager_ServeHTTP_Call) Return() *MockClusterManager_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClusterManager_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockClusterManager_ServeHTTP_Call {
	_c.Run(run)
	return _c
}

// UpdateCluster provides a mock function with given fields: schemaFilePath
func (_m *MockClusterManager) UpdateCluster(schemaFilePath string) error {
	ret := _m.Called(schemaFilePath)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(schemaFilePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_UpdateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCluster'
type MockClusterManager_UpdateCluster_Call struct {
	*mock.Call
}

// UpdateCluster is a helper method to define mock.On call
//   - schemaFilePath string
func (_e *MockClusterManager_Expecter) UpdateCluster(schemaFilePath interface{}) *MockClusterManager_UpdateCluster_Call {
	return &MockClusterManager_UpdateCluster_Call{Call: _e.mock.On("UpdateCluster", schemaFilePath)}
}

func (_c *MockClusterManager_UpdateCluster_Call) Run(run func(schemaFilePath string)) *MockClusterManager_UpdateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClusterManager_UpdateCluster_Call) Return(_a0 error) *MockClusterManager_UpdateCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_UpdateCluster_Call) RunAndReturn(run func(string) error) *MockClusterManager_UpdateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterManager creates a new instance of MockClusterManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterManager {
	mock := &MockClusterManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
